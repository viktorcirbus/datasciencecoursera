makeVector(10)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(10)
makeCacheMatrix <- function(x = matrix()) {
# initialize the stored inverse value so it is NULL
inverse <- NULL
# to do the setting of the value of the matrix
set <- function(y) {
x <<- y
#set again to NULL the inverse since the matrix has change
inverse <<- NULL
}
#get function to get the value of the matrix
get <- function() x
#to set the inverse of the matrix
setinverse <- function(inverse_) inverse <<- inverse_
#to get the inverse of the matrix
getinverse <- function() inverse
#the returned list of the functinos used above
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
#look for the matrix if it is already cached
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
#return the inverse of the matrix since it's already cached
return(inverse)
}
#since it's nos chached, get the matrix
data <- x$get()
#compute the inverse for the matrix we got
inverse <- solve(data, ...)
#set the inverse of the matrix, that is cache-ing it
x$setinverse(inverse)
#return the value of the inverse
inverse
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(10)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(10)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(10)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(1:10)
vektor=as.vector(1:10)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
vektor=as.vector(1:10)
cachemean(vektor)
cachemean(vektor)
cachemean(vektor)
matice=as.matrix(100,10,10)
View(matice)
data=1:100
matice=as.matrix(data,nrow=10,ncol=10)
View(matice)
data=1:100
matice=matrix(data,nrow=10,ncol=10)
View(matice)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
#start of the makeCacheMatrix function
makeCacheMatrix <- function(x = matrix()) {
# initialize the stored inverse value so it is NULL
inverse <- NULL
# to do the setting of the value of the matrix
set <- function(y) {
x <<- y
#set again to NULL the inverse since the matrix has change
inverse <<- NULL
}
#get function to get the value of the matrix
get <- function() x
#to set the inverse of the matrix
setinverse <- function(inverse_) inverse <<- inverse_
#to get the inverse of the matrix
getinverse <- function() inverse
#the returned list of the functinos used above
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
#start of the cacheSolve function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
#look for the matrix if it is already cached
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
#return the inverse of the matrix since it's already cached
return(inverse)
}
#since it's nos chached, get the matrix
data <- x$get()
#compute the inverse for the matrix we got
inverse <- solve(data, ...)
#set the inverse of the matrix, that is cache-ing it
x$setinverse(inverse)
#return the value of the inverse
inverse
}
data=1:100
matice=matrix(data,nrow=10,ncol=10)
cacheSolve(matice)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
vektor=as.vector(1:10)
cachemean(vektor)
z=numeric()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
vektor=as.vector(1:10)
vector=as.data.frame(vector)
cachemean(vektor)
vector=as.data.frame(vector)
vektor=as.vector(1:10)
vektor=as.data.frame(vektor)
View(vektor)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
vektor=as.vector(1:10)
vektor=as.data.frame(vektor)
cachemean(vektor)
cachemean(vektor)
vektor=as.vector(1:10)
cachemean(vektor)
data=1:100
matice=matrix(data,nrow=10,ncol=10)
cacheSolve(matice)
data=1:100
matice=matrix(data,nrow=10,ncol=10)
cacheSolve(matice)
data=1:100
matice=matrix(data,nrow=10,ncol=10)
cacheSolve(matice)
cachemean
cachemean()
cachemean(10)
cachemean(1:10)
vektor=as.vector(1:10)
vektor.cachemean
vektor(cachemean)
cachemean(vektor)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(vektor)
makeVector(vektor)
cachemean(vektor)
cachemean(makeVector(vektor))
data=1:100
matice=matrix(data,nrow=10,ncol=10)
cacheSolve(makeCacheMatrix(matice))
data=1:200
matice=matrix(data,nrow=10,ncol=20)
cacheSolve(makeCacheMatrix(matice))
data=1:25
matice=matrix(data,nrow=5,ncol=5)
cacheSolve(makeCacheMatrix(matice))
View(matice)
c = rbind(c(1, -1/4), c(-1/4, 1))
View(c)
cacheSolve(makeCacheMatrix(c))
View(c)
?solve
cacheSolve(makeCacheMatrix(c))
c = rbind(c(1, 3), c(5, 6))
View(c)
cacheSolve(makeCacheMatrix(c))
cacheSolve(makeCacheMatrix(c))
c
cacheSolve(makeCacheMatrix(c))
cacheSolve(makeCacheMatrix(c))
cacheSolve(makeCacheMatrix(c))
cacheSolve(makeCacheMatrix(c))
cacheSolve(makeCacheMatrix(c))
cachemean(makeVector(vektor))
cachemean(makeVector(vektor))
cachemean(makeVector(vektor))
matice=matrix(data,nrow=5,ncol=5)
matice=matrix(data,nrow=5,ncol=5)
cacheSolve(makeCacheMatrix(c))
cacheSolve(makeCacheMatrix(c))
cacheSolve(makeCacheMatrix(c))
cacheSolve(makeCacheMatrix(c))
cacheSolve(makeCacheMatrix(c))
cacheSolve(makeCacheMatrix(c))
cacheSolve(makeCacheMatrix(c))
cacheSolve(makeCacheMatrix(c))
cacheSolve(makeCacheMatrix(c))
cacheSolve(makeCacheMatrix(c))
cacheSolve(makeCacheMatrix(c))
cacheSolve(makeCacheMatrix(c))
cacheSolve(makeCacheMatrix(c))
